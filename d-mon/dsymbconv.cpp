
#include "dmain.h"

#ifdef LINUX
namespace dmon {
#endif



unsigned char dtable_ISO88595_win1251[256] =
{
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
	0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
	0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
	0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
	0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,

	0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
	0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,

	0xa0, 
	0xa8, 
	0x80, 
	0x81, 
	0xaa, 
	0xa5, 
	0xb2, 
	0xaf, 
	0xa3, 
	0x8a, 
	0x8c, 
	0x8e, 
	0x8d, 
	0xad, 
	0xa1, 
	0x8f, 

	0xc0, 
	0xc1, 
	0xc2, 
	0xc3, 
	0xc4, 
	0xc5, 
	0xc6, 
	0xc7, 
	0xc8, 
	0xc9, 
	0xca, 
	0xcb, 
	0xcc, 
	0xcd, 
	0xce, 
	0xcf, 

	0xd0, 
	0xd1, 
	0xd2, 
	0xd3, 
	0xd4, 
	0xd5, 
	0xd6, 
	0xd7, 
	0xd8, 
	0xd9, 
	0xda, 
	0xdb, 
	0xdc, 
	0xdd, 
	0xde, 
	0xdf, 

	0xe0, 
	0xe1, 
	0xe2, 
	0xe3, 
	0xe4, 
	0xe5, 
	0xe6, 
	0xe7, 
	0xe8, 
	0xe9, 
	0xea, 
	0xeb, 
	0xec, 
	0xed, 
	0xee, 
	0xef, 

	0xf0, 
	0xf1, 
	0xf2, 
	0xf3, 
	0xf4, 
	0xf5, 
	0xf6, 
	0xf7, 
	0xf8, 
	0xf9, 
	0xfa, 
	0xfb, 
	0xfc, 
	0xfd, 
	0xfe, 
	0xff, 

	0xb9, 
	0xb8, 
	0x90, 
	0x83, 
	0xba, 
	0xbe, 
	0xb3, 
	0xbf, 
	0xbc, 
	0x9a, 
	0x9c, 
	0x9e, 
	0x9d, 
	0xa7, 
	0xa2, 
	0x9f   

/*
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
	0x, 
*/

};


unsigned char dtable_win1251_ISO88595[256] =
{
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
	0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
	0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
	0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
	0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,

	0xa2, 
	0xa3, 
	0x82, 
	0xf3, 
	0x84, 
	0x85, 
	0x86, 
	0x87, 
	0x88, 
	0x89, 
	0xa9, 
	0x8b, 
	0xaa, 
	0xac, 
	0xab, 
	0xaf, 

	0xf2, 
	0x91, 
	0x92, 
	0x93, 
	0x94, 
	0x95, 
	0x96, 
	0x97, 
	0x98, 
	0x99, 
	0xf9, 
	0x9b, 
	0xfa, 
	0xfc, 
	0xfb, 
	0xff, 

	0xa0, 
	0xae, 
	0xfe, 
	0xa8, 
	0x20, 
	0x20, 
	0x20, 
	0xfd, 
	0xa1, 
	0x20, 
	0xa4, 
	0x20, 
	0x20, 
	0xad, 
	0x20, 
	0xa7, 

	0x20, 
	0x20, 
	0xa6, 
	0xf6, 
	0x20, 
	0x20, 
	0x20, 
	0x20, 
	0xf1, 
	0xf0, 
	0xf4, 
	0x20, 
	0xf8, 
	0xa5, 
	0xf5, 
	0xf7, 


	0xb0, 
	0xb1, 
	0xb2, 
	0xb3, 
	0xb4, 
	0xb5, 
	0xb6, 
	0xb7, 
	0xb8, 
	0xb9, 
	0xba, 
	0xbb, 
	0xbc, 
	0xbd, 
	0xbe, 
	0xbf, 

	0xc0, 
	0xc1, 
	0xc2, 
	0xc3, 
	0xc4, 
	0xc5, 
	0xc6, 
	0xc7, 
	0xc8, 
	0xc9, 
	0xca, 
	0xcb, 
	0xcc, 
	0xcd, 
	0xce, 
	0xcf, 

	0xd0, 
	0xd1, 
	0xd2, 
	0xd3, 
	0xd4, 
	0xd5, 
	0xd6, 
	0xd7, 
	0xd8, 
	0xd9, 
	0xda, 
	0xdb, 
	0xdc, 
	0xdd, 
	0xde, 
	0xdf, 

	0xe0, 
	0xe1, 
	0xe2, 
	0xe3, 
	0xe4, 
	0xe5, 
	0xe6, 
	0xe7, 
	0xe8, 
	0xe9, 
	0xea, 
	0xeb, 
	0xec, 
	0xed, 
	0xee, 
	0xef, 
};

unsigned char dtable_ascii_gsm_[128] =
{
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x0a, 
	0x3f, 
	0x3f, 
	0x0d, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	
	0x20, 
	0x21, 
	0x22, 
	0x23, 
	0x02, 
	0x25, 
	0x26, 
	0x27, 
	0x28, 
	0x29, 
	0x2a, 
	0x2b, 
	0x2c, 
	0x2d, 
	0x2e, 
	0x2f, 
	0x30, 
	0x31, 
	0x32, 
	0x33, 
	0x34, 
	0x35, 
	0x36, 
	0x37, 
	0x38, 
	0x39, 
	0x3a, 
	0x3b, 
	0x3c, 
	0x3d, 
	0x3e, 
	0x3f, 
	0x00, 
	0x41, 
	0x42, 
	0x43, 
	0x44, 
	0x45, 
	0x46, 
	0x47, 
	0x48, 
	0x49, 
	0x4a, 
	0x4b, 
	0x4c, 
	0x4d, 
	0x4e, 
	0x4f, 
	0x50, 
	0x51, 
	0x52, 
	0x53, 
	0x54, 
	0x55, 
	0x56, 
	0x57, 
	0x58, 
	0x59, 
	0x5a, 
	0x28, 
	0x2f, 
	0x29, 
	0x27, 
	0x11, 
	0x3f, 
	0x61, 
	0x62, 
	0x63, 
	0x64, 
	0x65, 
	0x66, 
	0x67, 
	0x68, 
	0x69, 
	0x6a, 
	0x6b, 
	0x6c, 
	0x6d, 
	0x6e, 
	0x6f, 
	0x70, 
	0x71, 
	0x72, 
	0x73, 
	0x74, 
	0x75, 
	0x76, 
	0x77, 
	0x78, 
	0x79, 
	0x7a, 
	0x28, 
	0x21, 
	0x29, 
	0x2d, 
	0x3f  
};

unsigned char dtable_ascii_gsm[128] =
{
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x0a, 
	0x3f, 
	0x3f, 
	0x0d, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	
	0x20, 
	0x21, 
	0x22, 
	0x23, 
	0x02, 
	0x25, 
	0x26, 
	0x27, 
	0x28, 
	0x29, 
	0x2a, 
	0x2b, 
	0x2c, 
	0x2d, 
	0x2e, 
	0x2f, 
	0x30, 
	0x31, 
	0x32, 
	0x33, 
	0x34, 
	0x35, 
	0x36, 
	0x37, 
	0x38, 
	0x39, 
	0x3a, 
	0x3b, 
	0x3c, 
	0x3d, 
	0x3e, 
	0x3f, 
	0x00, 
	0x41, 
	0x42, 
	0x43, 
	0x44, 
	0x45, 
	0x46, 
	0x47, 
	0x48, 
	0x49, 
	0x4a, 
	0x4b, 
	0x4c, 
	0x4d, 
	0x4e, 
	0x4f, 
	0x50, 
	0x51, 
	0x52, 
	0x53, 
	0x54, 
	0x55, 
	0x56, 
	0x57, 
	0x58, 
	0x59, 
	0x5a, 
	0x1b, 
	0x1b, 
	0x1b, 
	0x1b, 
	0x11, 
	0x3f, 
	0x61, 
	0x62, 
	0x63, 
	0x64, 
	0x65, 
	0x66, 
	0x67, 
	0x68, 
	0x69, 
	0x6a, 
	0x6b, 
	0x6c, 
	0x6d, 
	0x6e, 
	0x6f, 
	0x70, 
	0x71, 
	0x72, 
	0x73, 
	0x74, 
	0x75, 
	0x76, 
	0x77, 
	0x78, 
	0x79, 
	0x7a, 
	0x1b, 
	0x1b, 
	0x1b, 
	0x1b, 
	0x3f  
};

unsigned char dtable_ascii_gsm_ext[128] =
{
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x3c, 
	0x2f, 
	0x3e, 
	0x14, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x00, 
	0x28, 
	0x40, 
	0x29, 
	0x3d, 
	0x3f  
};

unsigned char dtable_gsm_ascii[128] =
{
	0x40, 
	0x3f, 
	0x24, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x0a, 
	0x3f, 
	0x3f, 
	0x0d, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x5f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	
	0x20, 
	0x21, 
	0x22, 
	0x23, 
	0x3f, 
	0x25, 
	0x26, 
	0x27, 
	0x28, 
	0x29, 
	0x2a, 
	0x2b, 
	0x2c, 
	0x2d, 
	0x2e, 
	0x2f, 
	0x30, 
	0x31, 
	0x32, 
	0x33, 
	0x34, 
	0x35, 
	0x36, 
	0x37, 
	0x38, 
	0x39, 
	0x3a, 
	0x3b, 
	0x3c, 
	0x3d, 
	0x3e, 
	0x3f, 
	0x3f, 
	0x41, 
	0x42, 
	0x43, 
	0x44, 
	0x45, 
	0x46, 
	0x47, 
	0x48, 
	0x49, 
	0x4a, 
	0x4b, 
	0x4c, 
	0x4d, 
	0x4e, 
	0x4f, 
	0x50, 
	0x51, 
	0x52, 
	0x53, 
	0x54, 
	0x55, 
	0x56, 
	0x57, 
	0x58, 
	0x59, 
	0x5a, 
	0x28, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x61, 
	0x62, 
	0x63, 
	0x64, 
	0x65, 
	0x66, 
	0x67, 
	0x68, 
	0x69, 
	0x6a, 
	0x6b, 
	0x6c, 
	0x6d, 
	0x6e, 
	0x6f, 
	0x70, 
	0x71, 
	0x72, 
	0x73, 
	0x74, 
	0x75, 
	0x76, 
	0x77, 
	0x78, 
	0x79, 
	0x7a, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f  
};

unsigned char dtable_gsm_ascii_ext[128] =
{
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x5e, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x7b, 
	0x7d, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x5c, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x5b, 
	0x7e, 
	0x5d, 
	0x3f, 
	0x7c, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f, 
	0x3f  
};



unsigned short dtable_ISO88595_UCS2[256] =
{
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
	0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
	0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
	0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
	0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,

	0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
	0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,

	0x00a0, 
	0x0401, 
	0x0402, 
	0x0403, 
	0x0404, 
	0x0405, 
	0x0406, 
	0x0407, 
	0x0408, 
	0x0409, 
	0x040a, 
	0x040b, 
	0x040c, 
	0x00ad, 
	0x040e, 
	0x040f, 

	0x0410, 
	0x0411, 
	0x0412, 
	0x0413, 
	0x0414, 
	0x0415, 
	0x0416, 
	0x0417, 
	0x0418, 
	0x0419, 
	0x041a, 
	0x041b, 
	0x041c, 
	0x041d, 
	0x041e, 
	0x041f, 

	0x0420, 
	0x0421, 
	0x0422, 
	0x0423, 
	0x0424, 
	0x0425, 
	0x0426, 
	0x0427, 
	0x0428, 
	0x0429, 
	0x042a, 
	0x042b, 
	0x042c, 
	0x042d, 
	0x042e, 
	0x042f, 

	0x0430, 
	0x0431, 
	0x0432, 
	0x0433, 
	0x0434, 
	0x0435, 
	0x0436, 
	0x0437, 
	0x0438, 
	0x0439, 
	0x043a, 
	0x043b, 
	0x043c, 
	0x043d, 
	0x043e, 
	0x043f, 

	0x0440, 
	0x0441, 
	0x0442, 
	0x0443, 
	0x0444, 
	0x0445, 
	0x0446, 
	0x0447, 
	0x0448, 
	0x0449, 
	0x044a, 
	0x044b, 
	0x044c, 
	0x044d, 
	0x044e, 
	0x044f, 

	0x2116, 
	0x0451, 
	0x0452, 
	0x0453, 
	0x0454, 
	0x0455, 
	0x0456, 
	0x0457, 
	0x0458, 
	0x0459, 
	0x045a, 
	0x045b, 
	0x045c, 
	0x00a7, 
	0x045e, 
	0x045f  
};


unsigned char dtable_UCS2_ISO88595[96] =
{
	0x3f,
	0xa1,
	0xa2,
	0xa3,
	0xa4,
	0xa5,
	0xa6,
	0xa7,
	0xa8,
	0xa9,
	0xaa,
	0xab,
	0xac,
	0x3f,
	0xae,
	0xaf,

	0xb0,
	0xb1,
	0xb2,
	0xb3,
	0xb4,
	0xb5,
	0xb6,
	0xb7,
	0xb8,
	0xb9,
	0xba,
	0xbb,
	0xbc,
	0xbd,
	0xbe,
	0xbf,

	0xc0,
	0xc1,
	0xc2,
	0xc3,
	0xc4,
	0xc5,
	0xc6,
	0xc7,
	0xc8,
	0xc9,
	0xca,
	0xcb,
	0xcc,
	0xcd,
	0xce,
	0xcf,

	0xd0,
	0xd1,
	0xd2,
	0xd3,
	0xd4,
	0xd5,
	0xd6,
	0xd7,
	0xd8,
	0xd9,
	0xda,
	0xdb,
	0xdc,
	0xdd,
	0xde,
	0xdf,

	0xe0,
	0xe1,
	0xe2,
	0xe3,
	0xe4,
	0xe5,
	0xe6,
	0xe7,
	0xe8,
	0xe9,
	0xea,
	0xeb,
	0xec,
	0xed,
	0xee,
	0xef,

	0x3f,
	0xf1,
	0xf2,
	0xf3,
	0xf4,
	0xf5,
	0xf6,
	0xf7,
	0xf8,
	0xf9,
	0xfa,
	0xfb,
	0xfc,
	0x3f,
	0xfe,
	0xff,
};


unsigned short dtable_win1251_UCS2[256] =
{
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
	0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
	0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
	0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
	0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,

	0x0402, 
	0x0403, 
	0x201A, 
	0x0453, 
	0x201E, 
	0x2026, 
	0x2020, 
	0x2021, 
	0x20AC, 
	0x2030, 
	0x0409, 
	0x2039, 
	0x040a, 
	0x040c, 
	0x040b, 
	0x040f, 

	0x0452, 
	0x2018, 
	0x2019, 
	0x201c, 
	0x201d, 
	0x2022, 
	0x2013, 
	0x2014, 
	0x0020, 
	0x2122, 
	0x0459, 
	0x203a, 
	0x045a, 
	0x045c, 
	0x045b, 
	0x045F, 

	0x00a0, 
	0x040e, 
	0x045e, 
	0x0408, 
	0x00a4, 
	0x0490, 
	0x00a6, 
	0x00a7, 
	0x0401, 
	0x00a9, 
	0x0404, 
	0x00ab, 
	0x00ac, 
	0x00ad, 
	0x00ae, 
	0x0407, 

	0x00b0, 
	0x00b1, 
	0x0406, 
	0x0456, 
	0x0491, 
	0x00b5, 
	0x00b6, 
	0x00b7, 
	0x0451, 
	0x2116, 
	0x0454, 
	0x00bb, 
	0x0458, 
	0x0405, 
	0x0455, 
	0x0457, 

	0x0410, 
	0x0411, 
	0x0412, 
	0x0413, 
	0x0414, 
	0x0415, 
	0x0416, 
	0x0417, 
	0x0418, 
	0x0419, 
	0x041a, 
	0x041b, 
	0x041c, 
	0x041d, 
	0x041e, 
	0x041f, 

	0x0420, 
	0x0421, 
	0x0422, 
	0x0423, 
	0x0424, 
	0x0425, 
	0x0426, 
	0x0427, 
	0x0428, 
	0x0429, 
	0x042a, 
	0x042b, 
	0x042c, 
	0x042d, 
	0x042e, 
	0x042f, 

	0x0430, 
	0x0431, 
	0x0432, 
	0x0433, 
	0x0434, 
	0x0435, 
	0x0436, 
	0x0437, 
	0x0438, 
	0x0439, 
	0x043a, 
	0x043b, 
	0x043c, 
	0x043d, 
	0x043e, 
	0x043f, 

	0x0440, 
	0x0441, 
	0x0442, 
	0x0443, 
	0x0444, 
	0x0445, 
	0x0446, 
	0x0447, 
	0x0448, 
	0x0449, 
	0x044a, 
	0x044b, 
	0x044c, 
	0x044d, 
	0x044e, 
	0x044f  
};


unsigned char dtable_UCS2_win1251[96] =
{
	0xa8, 
	0xa8, 
	0x80, 
	0x81, 
	0xaa, 
	0xbd, 
	0xb2, 
	0xaf, 
	0xa3, 
	0x8a, 
	0x8c, 
	0x8e, 
	0x8d, 
	0xc9, 
	0xa1, 
	0x8f, 

	0xc0, 
	0xc1, 
	0xc2, 
	0xc3, 
	0xc4, 
	0xc5, 
	0xc6, 
	0xc7, 
	0xc8, 
	0xc9, 
	0xca, 
	0xcb, 
	0xcc, 
	0xcd, 
	0xce, 
	0xcf, 

	0xd0, 
	0xd1, 
	0xd2, 
	0xd3, 
	0xd4, 
	0xd5, 
	0xd6, 
	0xd7, 
	0xd8, 
	0xd9, 
	0xda, 
	0xdb, 
	0xdc, 
	0xdd, 
	0xde, 
	0xdf, 

	0xe0, 
	0xe1, 
	0xe2, 
	0xe3, 
	0xe4, 
	0xe5, 
	0xe6, 
	0xe7, 
	0xe8, 
	0xe9, 
	0xea, 
	0xeb, 
	0xec, 
	0xed, 
	0xee, 
	0xef, 

	0xf0, 
	0xf1, 
	0xf2, 
	0xf3, 
	0xf4, 
	0xf5, 
	0xf6, 
	0xf7, 
	0xf8, 
	0xf9, 
	0xfa, 
	0xfb, 
	0xfc, 
	0xfd, 
	0xfe, 
	0xff, 
	0xb8, 
	0xb8, 
	0x90, 
	0x83, 
	0xba, 
	0xbe, 
	0xb3, 
	0xbf, 
	0xbc, 
	0x9a, 
	0x9c, 
	0x9e, 
	0x9d, 
	0xe9, 
	0xa2, 
	0x9f  

/*
	0x0490, 
	0x0491, 

	0x2013, 
	0x2014, 

	0x2018, 
	0x2019, 
	0x201A, 

	0x201c, 
	0x201d, 

	0x201E, 

	0x2020, 
	0x2021, 
	0x2022, 

	0x2026, 

	0x2030, 
	0x2039, 
	0x203a, 

	0x20AC, 

	0x2116, 

	0x2122, 
*/
};

unsigned char dtable_UCS2_win1251a[40] =
{
	0x96,
	0x97,
	0x3f,
	0x3f,
	0x3f,
	0x91,
	0x92,
	0x82,
	0x3f,
	0x93,
	0x94,
	0x84,
	0x3f,
	0x86,
	0x87,
	0x95,
	0x3f,
	0x3f,
	0x3f,
	0x85,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x89,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x3f,
	0x8b,
	0x9b,




};

void dconvert_ISO88595_to_win1251(unsigned char *dest,unsigned char *sour,dword len)
{
    for(dword i=0;i<len;i++)
        dest[i] = dtable_ISO88595_win1251[ sour[i] ];
}


void dconvert_win1251_to_ISO88595(unsigned char *dest,unsigned char *sour,dword len)
{
    for(dword i=0;i<len;i++)
        dest[i] = dtable_win1251_ISO88595[ sour[i] ];
}


inline byte dconvert_UCS2_to_win1251_symbol(unsigned short symbol)
{
	byte result;

	if(symbol < 0x100)
		result = (unsigned char)symbol;
	else
	{
		if( (symbol >= 0x400) && (symbol <= 0x45f) )
			result = dtable_UCS2_win1251[symbol - 0x400];
		else
		{
			if( (symbol >= 0x2013) && (symbol <= 0x203a) )
				result = dtable_UCS2_win1251a[symbol - 0x2013];
			else
			{
				switch (symbol)
				{













































					case 0x0490: 
						result = 0xa5;
						break;
					case 0x0491: 
						result = 0xb4;
						break;

					case 0x20AC: 
						result = 0x88;
						break;
					case 0x2116: 
						result = 0xb9;
						break;
					case 0x2122: 
						result = 0x99;
						break;
					case 0xfeff:
						result = ' ';
						break;

					default:
						result = '?';
						break;
				}
			}
		}
	}
	return result;
}

void dconvert_UCS2_to_win1251(unsigned char *dest,unsigned short *sour,dword len)
{
    unsigned short symbol;

    for(dword i=0;i<len;i++)
    {
        symbol = sour[i];









		dest[i] = dconvert_UCS2_to_win1251_symbol(symbol);
    }
}


void dconvert_UCS2_to_win1251_swap(unsigned char *dest,unsigned short *sour,dword len)
{
    unsigned short symbol;
    unsigned short b1,b2;

    for(dword i=0;i<len;i++)
    {
        symbol = sour[i];

        b1 = symbol >> 8;
        b2 = symbol << 8;

        symbol = b1 | b2;















		dest[i] = dconvert_UCS2_to_win1251_symbol(symbol);
    }
}


void dconvert_win1251_to_UCS2(unsigned short *dest,unsigned char *sour,dword len)
{
    for(dword i=0;i<len;i++)
        dest[i] = dtable_win1251_UCS2[ sour[i] ];
}


void dconvert_win1251_to_UCS2_swap(unsigned short *dest,unsigned char *sour,dword len)
{
    unsigned short symbol;
    unsigned short b1,b2;

    for(dword i=0;i<len;i++)
    {
        symbol = dtable_win1251_UCS2[ sour[i] ];

        b1 = symbol >> 8;
        b2 = symbol << 8;
        symbol = b1 | b2;

        dest[i] = symbol;
    }
}


inline byte dconvert_UCS2_to_ISO88595_symbol(unsigned short symbol)
{
	byte result;
	if(symbol < 0xa7)
		result = (unsigned char)symbol;
	else
	{
		if((symbol >= 0xa8) && (symbol < 0x100))
			result = (unsigned char)symbol;
		else
		{
			if( (symbol >= 0x400) && (symbol <= 0x45f) )
				result = dtable_UCS2_ISO88595[symbol - 0x400];
			else
			{
				switch (symbol)
				{
					case 0xa7: 
						result = 0xfd;
						break;
					case 0x2116: 
						result = 0xf0;
						break;
					case 0xfeff:
						result = ' ';
						break;
					default:
						result = '?';
						break;
				}
			}
		}
	}
	return result;
}

void dconvert_UCS2_to_ISO88595(unsigned char *dest,unsigned short *sour,dword len)
{
	unsigned short symbol;

	for(dword i=0;i<len;i++)
	{
		symbol = sour[i];
		dest[i] = dconvert_UCS2_to_ISO88595_symbol(symbol);
	}
}

void dconvert_UCS2_to_ISO88595_swap(unsigned char *dest,unsigned short *sour,dword len)
{
	unsigned short symbol;
	unsigned short b1,b2;

	for(dword i=0;i<len;i++)
	{
		symbol = sour[i];

		b1 = symbol >> 8;
		b2 = symbol << 8;

		symbol = b1 | b2;

		dest[i] = dconvert_UCS2_to_ISO88595_symbol(symbol);
	}
}

void dconvert_ISO88595_to_UCS2(unsigned short *dest,unsigned char *sour,dword len)
{
	for(dword i=0;i<len;i++)
		dest[i] = dtable_ISO88595_UCS2[ sour[i] ];
}

void dconvert_ISO88595_to_UCS2_swap(unsigned short *dest,unsigned char *sour,dword len)
{
	unsigned short symbol;
	unsigned short b1,b2;

	for(dword i=0;i<len;i++)
	{
		symbol = dtable_ISO88595_UCS2[ sour[i] ];

		b1 = symbol >> 8;
		b2 = symbol << 8;
		symbol = b1 | b2;

		dest[i] = symbol;
	}
}


void dconvert_ascii_to_gsm_(unsigned char *dest,unsigned char *sour,dword len)
{
    unsigned char symbol;
    for(dword i=0;i<len;i++)
	{
        symbol = dtable_ascii_gsm_[ sour[i] ];
        if(symbol > 0x7f)
            symbol = 0x3f; 
        dest[i] = symbol;
	}
}

inline byte dconvert_ascii_to_gsm_symbol(unsigned char *dest,dword max,unsigned char _symbol)
{
	byte result = 0;
	unsigned char symbol;

	symbol = dtable_ascii_gsm[ _symbol ];
	if(symbol > 0x7f)
	{
		if(max)
		{
			*dest = 0x3f; 
			result = 1;
		}
	}
	else
	{
		if(symbol != 0x1b)
		{
			if(max)
			{
				*dest = symbol;
				result = 1;
			}
		}
		else
		{
			if(max >= 2)
			{
				symbol = dtable_ascii_gsm_ext[ _symbol ];
				if(symbol > 0x7f)
				{
					*dest = 0x3f; 
					result = 1;
				}
				else
				{
					dest[0] = 0x1b;
					dest[1] = symbol;
					result = 2;
				}
			}
		}
	}

	return result;
}

dword dconvert_ascii_to_gsm(unsigned char *dest,dword max,unsigned char *sour,dword len)
{

	byte sl;
	dword j = 0;
	for(dword i=0;i<len;i++)
	{
























		sl = dconvert_ascii_to_gsm_symbol(dest,max,sour[i]);
		if(!sl)
			break;
		dest += sl;
		max -= sl;
		j += sl;
	}

	return j;
}

void dconvert_gsm_to_ascii_(unsigned char *dest,unsigned char *sour,dword len)
{
    unsigned char symbol;
    for(dword i=0;i<len;i++)
	{
        symbol = dtable_gsm_ascii[ sour[i] ];
        if(symbol > 0x7f)
            symbol = 0x3f; 
        dest[i] = symbol;
	}
}

dword dconvert_gsm_to_ascii(unsigned char *dest,dword max,unsigned char *sour,dword len)
{
    unsigned char symbol;
	dword j = 0;
    for(dword i=0;i<len;i++)
	{
        if(j >= max)
			break;

		if(sour[i] != 0x1b)
		{
			symbol = dtable_gsm_ascii[ sour[i] ];
			if(symbol > 0x7f)
				symbol = 0x3f; 
			dest[j++] = symbol;
		}
		else
		{
			i++;
			if(i >= len)
				break;
			symbol = dtable_gsm_ascii_ext[ sour[i] ];
			if(symbol > 0x7f)
				symbol = 0x3f; 
			dest[j++] = symbol;
		}
	}

	return j;
}


void dconvert_gsm_to_UCS2_(unsigned short *dest,unsigned char *sour,dword len)
{
    unsigned char symbol;
    for(dword i=0;i<len;i++)
	{
        symbol = dtable_gsm_ascii[ sour[i] ];
        if(symbol > 0x7f)
            symbol = 0x3f; 
        dest[i] = symbol;
	}
}

void dconvert_gsm_to_UCS2_swap_(unsigned short *dest,unsigned char *sour,dword len)
{
	unsigned short symbol;
	unsigned short b1,b2;
	for(dword i=0;i<len;i++)
	{
		symbol = dtable_gsm_ascii[ sour[i] ];
		if(symbol > 0x7f)
			symbol = 0x3f; 

		b1 = symbol >> 8;
		b2 = symbol << 8;
		symbol = b1 | b2;

		dest[i] = symbol;
	}
}

dword dconvert_gsm_to_UCS2(unsigned short *dest,dword max,unsigned char *sour,dword len)
{
    unsigned char symbol;
	dword j = 0;
 
	for(dword i=0;i<len;i++)
	{
        if(j >= max)
			break;
		
		if(sour[i] != 0x1b)
		{
			symbol = dtable_gsm_ascii[ sour[i] ];
			if(symbol > 0x7f)
				symbol = 0x3f; 
			dest[j++] = symbol;
		}
		else
		{
			i++;
			if(i >= len)
				break;
			symbol = dtable_gsm_ascii_ext[ sour[i] ];
			if(symbol > 0x7f)
				symbol = 0x3f; 
			dest[j++] = symbol;
		}
	}

	return j;
}

dword dconvert_gsm_to_UCS2_swap(unsigned short *dest,dword max,unsigned char *sour,dword len)
{
	unsigned short symbol;
	unsigned short b1,b2;
	dword j = 0;

	for(dword i=0;i<len;i++)
	{
		if(j >= max)
			break;

		if(sour[i] != 0x1b)
		{
			symbol = dtable_gsm_ascii[ sour[i] ];
		}
		else
		{
			i++;
			if(i >= len)
				break;
			symbol = dtable_gsm_ascii_ext[ sour[i] ];
		}
		if(symbol > 0x7f)
			symbol = 0x3f; 

 		b1 = symbol >> 8;
		b2 = symbol << 8;
		symbol = b1 | b2;

		dest[j++] = symbol;
	}

	return j;
}

dword dconvert_UCS2_to_gsm(unsigned char *dest,dword max,unsigned short *sour,dword len)
{
	unsigned char symbol;
	byte sl;
	dword result = 0;

    for(dword i=0;i<len;i++)
    {
		symbol = dconvert_UCS2_to_win1251_symbol(sour[i]);
		sl = dconvert_ascii_to_gsm_symbol(dest,max,symbol);
		if(!sl)
			break;
		dest += sl;
		max -= sl;
		result += sl;
    }

	return result;
}

void dconvert_UCS2_to_gsm_(unsigned char *dest,unsigned short *sour,dword len)
{
	unsigned char symbol,tsymbol;

	for(dword i=0;i<len;i++)
	{
		tsymbol = dconvert_UCS2_to_win1251_symbol(sour[i]);

		symbol = dtable_ascii_gsm_[ tsymbol ];
		if(symbol > 0x7f)
			symbol = 0x3f; 
		dest[i] = symbol;
	}

}

void dconvert_UCS2_to_gsm_swap_(unsigned char *dest,unsigned short *sour,dword len)
{
	unsigned char symbol,tsymbol;


	for(dword i=0;i<len;i++)
	{
		tsymbol = dconvert_UCS2_to_win1251_symbol(sour[i]);

		symbol = dtable_ascii_gsm_[ tsymbol ];
		if(symbol > 0x7f)
			symbol = 0x3f; 
		dest[i] = symbol;
	}

}


void dconvert_8b_to_ASCII(unsigned char *dest,unsigned char *sour,dword len)
{
    unsigned short symbol;
    for(dword i=0;i<len;i++)
    {
        symbol = dtable_win1251_UCS2[ sour[i] ];
        if(symbol > 0x7f)
            symbol = '?';
        dest[i] = (unsigned char)symbol;
    }
}



typedef unsigned long	UTF32;
typedef unsigned short	UTF16;
typedef unsigned char	UTF8;
typedef unsigned char	Boolean;

typedef enum
{
	conversionOK,
	sourceExhausted,
	targetExhausted,
	sourceIllegal
} DConversionResult;

typedef enum
{
	strictConversion = 0,
	lenientConversion
} DConversionFlags;

#define UNI_REPLACEMENT_CHAR (UTF32)0x0000FFFD
#define UNI_MAX_BMP (UTF32)0x0000FFFF
#define UNI_MAX_UTF16 (UTF32)0x0010FFFF
#define UNI_MAX_UTF32 (UTF32)0x7FFFFFFF
#define UNI_MAX_LEGAL_UTF32 (UTF32)0x0010FFFF

#define UNI_SUR_HIGH_START  (UTF32)0xD800
#define UNI_SUR_HIGH_END    (UTF32)0xDBFF
#define UNI_SUR_LOW_START   (UTF32)0xDC00
#define UNI_SUR_LOW_END     (UTF32)0xDFFF

static const int ucs_half_shift  = 10; 
static const UTF32 ucs_half_base = 0x0010000UL;
static const UTF32 ucs_half_mask = 0x3FFUL;

static const char ucs_trailing_bytes_for_utf8[256] =
{
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
};

static const UTF32 ucs_offsetsFromUTF8[6] = {0x00000000UL, 0x00003080UL, 0x000E2080UL, 0x03C82080UL, 0xFA082080UL, 0x82082080UL };

static const UTF8 ucs_first_byte_mark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };


static Boolean ucs_is_legal_utf8(const UTF8 *source, int length)
{
	UTF8 a;
	const UTF8 *srcptr = source+length;
	switch (length) {
	default: return false;
		
	case 4: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
	case 3: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
	case 2: if ((a = (*--srcptr)) > 0xBF) return false;

		switch (*source) {
			
		case 0xE0: if (a < 0xA0) return false; break;
		case 0xED: if (a > 0x9F) return false; break;
		case 0xF0: if (a < 0x90) return false; break;
		case 0xF4: if (a > 0x8F) return false; break;
		default:   if (a < 0x80) return false;
		}

	case 1: if (*source >= 0x80 && *source < 0xC2) return false;
	}
	if (*source > 0xF4) return false;
	return true;
}


DConversionResult ucs_convert_unf8_to_utfF16(const UTF8** sourceStart, const UTF8* sourceEnd,UTF16** targetStart, UTF16* targetEnd, DConversionFlags flags)
{
    DConversionResult result = conversionOK;
    const UTF8* source = *sourceStart;
    UTF16* target = *targetStart;
    while (source < sourceEnd)
	{
	UTF32 ch = 0;
	unsigned short extraBytesToRead = ucs_trailing_bytes_for_utf8[*source];
	if (source + extraBytesToRead >= sourceEnd) {
	    result = sourceExhausted; break;
	}
	
	if (! ucs_is_legal_utf8(source, extraBytesToRead+1)) {
	    result = sourceIllegal;
	    break;
	}
	/*
	 * The cases all fall through. See "Note A" below.
	 */
	switch (extraBytesToRead) {
	    case 5: ch += *source++; ch <<= 6; 
	    case 4: ch += *source++; ch <<= 6; 
	    case 3: ch += *source++; ch <<= 6;
	    case 2: ch += *source++; ch <<= 6;
	    case 1: ch += *source++; ch <<= 6;
	    case 0: ch += *source++;
	}
	ch -= ucs_offsetsFromUTF8[extraBytesToRead];

	if (target >= targetEnd) {
	    source -= (extraBytesToRead+1); 
	    result = targetExhausted; break;
	}
	if (ch <= UNI_MAX_BMP) { 
	    
	    if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_LOW_END) {
		if (flags == strictConversion) {
		    source -= (extraBytesToRead+1); 
		    result = sourceIllegal;
		    break;
		} else {
		    *target++ = UNI_REPLACEMENT_CHAR;
		}
	    } else {
		*target++ = (UTF16)ch; 
	    }
	} else if (ch > UNI_MAX_UTF16) {
	    if (flags == strictConversion) {
		result = sourceIllegal;
		source -= (extraBytesToRead+1); 
		break; 
	    } else {
		*target++ = UNI_REPLACEMENT_CHAR;
	    }
	} else {
	    
	    if (target + 1 >= targetEnd) {
		source -= (extraBytesToRead+1); 
		result = targetExhausted; break;
	    }
	    ch -= ucs_half_base;
	    *target++ = (UTF16)((ch >> ucs_half_shift) + UNI_SUR_HIGH_START);
	    *target++ = (UTF16)((ch & ucs_half_mask) + UNI_SUR_LOW_START);
	}
    }
    *sourceStart = source;
    *targetStart = target;
    return result;
}

DConversionResult ucs_convert_utf16_to_utf8(const UTF16** sourceStart, const UTF16* sourceEnd,UTF8** targetStart, UTF8* targetEnd, DConversionFlags flags)
{
		DConversionResult result = conversionOK;
		const UTF16* source = *sourceStart;
		UTF8* target = *targetStart;
		while (source < sourceEnd) {
			UTF32 ch;
			unsigned short bytesToWrite = 0;
			const UTF32 byteMask = 0xBF;
			const UTF32 byteMark = 0x80; 
			const UTF16* oldSource = source; 
			ch = *source++;
			
			if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {
				
				if (source < sourceEnd) {
					UTF32 ch2 = *source;
					
					if (ch2 >= UNI_SUR_LOW_START && ch2 <= UNI_SUR_LOW_END) {
						ch = ((ch - UNI_SUR_HIGH_START) << ucs_half_shift)
							+ (ch2 - UNI_SUR_LOW_START) + ucs_half_base;
						++source;
					} else if (flags == strictConversion) { 
						--source; 
						result = sourceIllegal;
						break;
					}
				} else { 
					--source; 
					result = sourceExhausted;
					break;
				}
			} else if (flags == strictConversion) {
				
				if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {
					--source; 
					result = sourceIllegal;
					break;
				}
			}
			
			if (ch < (UTF32)0x80) {	     bytesToWrite = 1;
			} else if (ch < (UTF32)0x800) {     bytesToWrite = 2;
			} else if (ch < (UTF32)0x10000) {   bytesToWrite = 3;
			} else if (ch < (UTF32)0x110000) {  bytesToWrite = 4;
			} else {			    bytesToWrite = 3;
			ch = UNI_REPLACEMENT_CHAR;
			}

			target += bytesToWrite;
			if (target > targetEnd) {
				source = oldSource; 
				target -= bytesToWrite; result = targetExhausted; break;
			}
			switch (bytesToWrite) { 
			case 4: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
			case 3: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
			case 2: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
			case 1: *--target =  (UTF8)(ch | ucs_first_byte_mark[bytesToWrite]);
			}
			target += bytesToWrite;
		}
		*sourceStart = source;
		*targetStart = target;
		return result;
}


/*
dword convert_UCS2_to_UTF8(unsigned char *dest,dword max,unsigned short *sour,dword len)
{
	dword c = 0;
	unsigned short symbol;

	for(dword i=0;i<len;i++)
	{
		symbol = sour[i];
		if(symbol <  0x80)
		{
			if(c >= max)
				return 0;
			dest[c++] = (byte)symbol;
		}
		else
		{
			if(symbol <  0x800)
			{
				if((c + 2) > max)
					return 0;
				byte s;
				s = (byte)(symbol >> 6);
				s |= 0xc0;
				dest[c++] = s;
				s = (byte)(symbol & 0x3f);
				s |= 0x80;
				dest[c++] = s;
			}
			else
			{
				if(symbol <  0x10000)
				{
					if((c + 3) > max)
						return 0;
					byte s;
					s = (byte)(symbol >> 12);
					s |= 0xe0;
					dest[c++] = s;
					s = (byte)((symbol >> 6) & 0x3f);
					s |= 0x80;
					dest[c++] = s;
					s = (byte)(symbol & 0x3f);
					s |= 0x80;
					dest[c++] = s;
				}
				else
				{
					if(symbol <  0x110000)
					{
						if((c + 4) > max)
							return 0;
						byte s;
						s = (byte)(symbol >> 18);
						s |= 0xe0;
						dest[c++] = s;
						s = (byte)((symbol >> 12) & 0x3f);
						s |= 0x80;
						dest[c++] = s;
						s = (byte)((symbol >> 6) & 0x3f);
						s |= 0x80;
						dest[c++] = s;
						s = (byte)(symbol & 0x3f);
						s |= 0x80;
						dest[c++] = s;
					}
					else
					{
						if(c >= max)
							return 0;
						dest[c++] = (byte)'?';
					}
				}

			}

		}
	}

	return c;
}
*/

dword dconvert_UCS2_to_UTF8(unsigned char *dest,dword max,unsigned short *sour,dword len)
{
	dword c = 0;
	DConversionResult r;
	const UTF16 *sourceStart,*sourceEnd;
	UTF8 *targetStart,*targetEnd;


	sourceStart = sour;
	sourceEnd = sour + (len / 2);
	targetStart = dest;
	targetEnd = dest + max;

	r = ucs_convert_utf16_to_utf8 (&sourceStart,sourceEnd, &targetStart,targetEnd, strictConversion);
	if(r != conversionOK)
		return 0;

	c = (dword)(targetStart - dest);

	return c;
}

dword dconvert_UCS2_to_UTF8_swap(unsigned char *dest,dword max,unsigned short *sour,dword len)
{
	word buff[32768];

	if(len > 32768)
		return 0;

	{
		unsigned short symbol;
		unsigned short b1,b2;
		dword l;
		l = len / 2;
		for(dword i=0;i<l;i++)
		{
			symbol = sour[i];

			b1 = symbol >> 8;
			b2 = symbol << 8;

			symbol = b1 | b2;

			buff[i] = symbol;
		}
	}


	return dconvert_UCS2_to_UTF8(dest,max,buff,len);
}


dword dconvert_UTF8_to_UCS2(unsigned short *dest,dword max,unsigned char *sour,dword len)
{
	dword c = 0;
	DConversionResult r;
	const UTF8 *sourceStart,*sourceEnd;
	UTF16 *targetStart,*targetEnd;

	sourceStart = sour;
	sourceEnd = sour + len;
	targetStart = dest;
	targetEnd = dest + (max / 2);

	r = ucs_convert_unf8_to_utfF16(&sourceStart,sourceEnd,&targetStart,targetEnd,strictConversion);
	if(r != conversionOK)
		return 0;

 	c = (dword)(targetStart - dest);
	if(c > max)
		return 0;

	return c * 2;
}

dword dconvert_UTF8_to_UCS2_swap(unsigned short *dest,dword max,unsigned char *sour,dword len)
{
	word buff[32768];
	dword c;

	c = dconvert_UTF8_to_UCS2(buff,sizeof(buff),sour,len);

	if(c)
	{
		len = c / 2;
		{
			unsigned short symbol;
			unsigned short b1,b2;
			for(dword i=0;i<len;i++)
			{
				symbol = buff[i];

				b1 = symbol >> 8;
				b2 = symbol << 8;

				symbol = b1 | b2;

				dest[i] = symbol;
			}
		}
	}

	return len;
}


#ifdef LINUX
}
#endif
